[{"/Users/joshuaanderson/Desktop/desktop/code/jotai-practice/hnefatafl/src/App.tsx":"1","/Users/joshuaanderson/Desktop/desktop/code/jotai-practice/hnefatafl/src/reportWebVitals.ts":"2","/Users/joshuaanderson/Desktop/desktop/code/jotai-practice/hnefatafl/src/atoms/boardState.ts":"3","/Users/joshuaanderson/Desktop/desktop/code/jotai-practice/hnefatafl/src/index.tsx":"4","/Users/joshuaanderson/Desktop/desktop/code/jotai-practice/hnefatafl/src/atoms/selectedMarker.ts":"5"},{"size":5266,"mtime":1609617851150,"results":"6","hashOfConfig":"7"},{"size":425,"mtime":1609602775056,"results":"8","hashOfConfig":"7"},{"size":540,"mtime":1609609531239,"results":"9","hashOfConfig":"7"},{"size":567,"mtime":1609609417951,"results":"10","hashOfConfig":"7"},{"size":75,"mtime":1609615335068,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"148cfn6",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/joshuaanderson/Desktop/desktop/code/jotai-practice/hnefatafl/src/App.tsx",["23","24"],"import React, { useState } from \"react\";\nimport classnames from \"classnames\";\n\nimport { boardAtom } from \"./atoms/boardState\";\nimport { selectedMarkerAtom } from \"./atoms/selectedMarker\";\nimport \"./App.scss\";\nimport { useAtom } from \"jotai\";\n\nconst BLACK = 2;\nconst WHITE = 1;\nconst EMPTY = 0;\n\nconst BOARD_WIDTH = 11;\nconst BOARD_HEIGHT = 11;\n\n// highlight a piece by clicking on it.\n// Any piece that has an open space next to it should be highlightable\n\n// has valid move: get neighbors.  One neighbor or more is empty.\n\nfunction App() {\n  const [boardState, updateBoardState] = useAtom(boardAtom);\n  const [selectedMarker, updateSelectedMarker] = useAtom(selectedMarkerAtom);\n\n  const makeBoard = (BOARD_WIDTH: number, BOARD_HEIGHT: number) => {\n    const boardContents: JSX.Element[][] = [];\n    for (let i = 0; i < BOARD_HEIGHT; i++) {\n      const row: JSX.Element[] = [];\n      for (let j = 0; j < BOARD_WIDTH; j++) {\n        const markerClasses = classnames({\n          marker: true,\n          isWhite: boardState[i][j] === WHITE,\n          isBlack: boardState[i][j] === BLACK,\n        });\n        row.push(\n          <div\n            onClick={() => handleMove(i, j)}\n            className=\"cell\"\n            id={`${i}-${j}-cell`}\n            key={`${i}-${j}`}\n          >\n            <div\n              id={`${i}-${j}-marker`}\n              className={markerClasses}\n              onClick={() => handleClickMarker(i, j)}\n            ></div>\n          </div>\n        );\n      }\n      boardContents.push(row);\n    }\n    return <div className=\"board\">{boardContents}</div>;\n  };\n\n  const hasEmptyNeighbors = (row: number, column: number): boolean => {\n    const neighbors = {\n      north: boardState[row - 1]?.[column],\n      south: boardState[row + 1]?.[column],\n      east: boardState[row][column + 1],\n      west: boardState[row][column - 1],\n    };\n    for (let prop in neighbors) {\n      if (neighbors[prop as \"north\" | \"south\" | \"east\" | \"west\"] === EMPTY) {\n        return true;\n      }\n    }\n    console.log(false);\n    return false;\n  };\n\n  const handleClickMarker = (row: number, col: number) => {\n    if (hasEmptyNeighbors(row, col)) {\n      selectMarker(row, col);\n    }\n  };\n\n  const selectMarker = (row: number, col: number) => {\n    removeCurrentHighlight();\n    highlightMarker(row, col);\n    updateSelectedMarker(`${row}-${col}`);\n  };\n\n  const highlightMarker = (row: number, column: number) => {\n    document\n      .getElementById(`${row}-${column}-marker`)\n      ?.classList?.add(\"highlight\");\n  };\n\n  const handleMove = (row: number, column: number) => {\n    const [currentRow, currentColumn] = selectedMarker.split(\"-\");\n    const moveIsLegal = isMoveLegal(\n      row,\n      column,\n      parseInt(currentRow),\n      parseInt(currentColumn)\n    );\n    if (moveIsLegal) {\n      // TODO: add code to update board state\n      const currentEl = document.getElementById(`${selectedMarker}-marker`);\n      currentEl?.classList.remove(\"isWhite\");\n      currentEl?.classList.remove(\"isBlack\");\n      document\n        .getElementById(`${row}-${column}-marker`)\n        ?.classList.add(\"isBlack\");\n    }\n  };\n\n  const isMoveLegal = (\n    targetRow: number,\n    targetColumn: number,\n    currentRow: number,\n    currentColumn: number\n  ): boolean => {\n    // is move orthogonal, to a non-occupied space?\n    if (\n      boardState[targetRow][targetColumn] !== EMPTY ||\n      (targetColumn !== currentColumn && targetRow !== currentRow)\n    ) {\n      return false;\n    }\n\n    if (targetRow !== currentRow) {\n      // check if marker is obstructed below\n      if (targetRow > currentRow) {\n        for (let i = currentRow + 1; i < targetRow; i++) {\n          if (boardState[i][targetColumn] !== EMPTY) {\n            return false;\n          }\n        }\n      }\n      // check if marker is obstructed above\n      if (targetRow < currentRow) {\n        for (let i = currentRow - 1; i > targetRow; i--) {\n          if (boardState[i][targetColumn] !== EMPTY) {\n            console.log(boardState[i][targetColumn]);\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n\n    if (targetColumn !== currentColumn) {\n      if (targetColumn > currentColumn) {\n        // check if marker is obstructed to the right\n        for (let i = currentColumn + 1; i < targetColumn; i++) {\n          if (boardState[targetRow][i] !== EMPTY) {\n            return false;\n          }\n        }\n      }\n      if (targetColumn < currentColumn) {\n        // check if marker is obstructed to the left\n        for (let i = currentColumn - 1; i > targetColumn; i--) {\n          console.log(currentColumn);\n          console.log(targetColumn);\n          if (boardState[targetRow][i] !== EMPTY) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n\n    console.error(\n      `somehow, code evaded all checks.  attempting move to ${targetRow}, ${targetColumn}`\n    );\n    return false;\n  };\n\n  const removeCurrentHighlight = () => {\n    const el = document.getElementById(`${selectedMarker}-marker`);\n    if (el) {\n      el?.classList.remove(\"highlight\");\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">Hnefatafl</h1>\n      {makeBoard(BOARD_WIDTH, BOARD_HEIGHT)}\n    </div>\n  );\n}\n\nexport default App;\n","/Users/joshuaanderson/Desktop/desktop/code/jotai-practice/hnefatafl/src/reportWebVitals.ts",[],"/Users/joshuaanderson/Desktop/desktop/code/jotai-practice/hnefatafl/src/atoms/boardState.ts",[],"/Users/joshuaanderson/Desktop/desktop/code/jotai-practice/hnefatafl/src/index.tsx",[],"/Users/joshuaanderson/Desktop/desktop/code/jotai-practice/hnefatafl/src/atoms/selectedMarker.ts",[],{"ruleId":"25","severity":1,"message":"26","line":1,"column":17,"nodeType":"27","messageId":"28","endLine":1,"endColumn":25},{"ruleId":"25","severity":1,"message":"29","line":22,"column":22,"nodeType":"27","messageId":"28","endLine":22,"endColumn":38},"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'updateBoardState' is assigned a value but never used."]