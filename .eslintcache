[{"/Users/joshuaanderson/Desktop/desktop/code/jotai-practice/hnefatafl/src/App.tsx":"1","/Users/joshuaanderson/Desktop/desktop/code/jotai-practice/hnefatafl/src/reportWebVitals.ts":"2","/Users/joshuaanderson/Desktop/desktop/code/jotai-practice/hnefatafl/src/atoms/boardState.ts":"3","/Users/joshuaanderson/Desktop/desktop/code/jotai-practice/hnefatafl/src/index.tsx":"4","/Users/joshuaanderson/Desktop/desktop/code/jotai-practice/hnefatafl/src/atoms/selectedMarker.ts":"5","/Users/joshuaanderson/Desktop/desktop/code/jotai-practice/hnefatafl/src/constants.ts":"6","/Users/joshuaanderson/Desktop/desktop/code/jotai-practice/hnefatafl/src/atoms/activePlayer.ts":"7","/Users/joshuaanderson/Desktop/desktop/code/jotai-practice/hnefatafl/src/components/Square/Square.tsx":"8","/Users/joshuaanderson/Desktop/desktop/code/jotai-practice/hnefatafl/src/components/Header/Header.tsx":"9","/Users/joshuaanderson/Desktop/desktop/code/jotai-practice/hnefatafl/src/atoms/shouldAlertUser.ts":"10","/Users/joshuaanderson/Desktop/desktop/code/jotai-practice/hnefatafl/src/atoms/index.ts":"11","/Users/joshuaanderson/Desktop/desktop/code/jotai-practice/hnefatafl/src/atoms/lastMove.ts":"12"},{"size":8763,"mtime":1611853085474,"results":"13","hashOfConfig":"14"},{"size":425,"mtime":1609602775056,"results":"15","hashOfConfig":"14"},{"size":569,"mtime":1609862984343,"results":"16","hashOfConfig":"14"},{"size":567,"mtime":1609609417951,"results":"17","hashOfConfig":"14"},{"size":75,"mtime":1611071508758,"results":"18","hashOfConfig":"14"},{"size":201,"mtime":1609821412620,"results":"19","hashOfConfig":"14"},{"size":281,"mtime":1610637447444,"results":"20","hashOfConfig":"14"},{"size":1595,"mtime":1611069523440,"results":"21","hashOfConfig":"14"},{"size":455,"mtime":1609863459333,"results":"22","hashOfConfig":"14"},{"size":86,"mtime":1611070104825,"results":"23","hashOfConfig":"14"},{"size":159,"mtime":1611851564825,"results":"24","hashOfConfig":"14"},{"size":162,"mtime":1611852250707,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},"148cfn6",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/joshuaanderson/Desktop/desktop/code/jotai-practice/hnefatafl/src/App.tsx",["53"],"import React, { useEffect } from \"react\";\nimport { useAtom } from \"jotai\";\nimport produce from \"immer\";\n\nimport { Neighbors, SpaceValue } from \"./types\";\nimport { DARK, LIGHT, EMPTY, BOARD_HEIGHT, BOARD_WIDTH } from \"./constants\";\nimport \"./App.scss\";\nimport {\n  activePlayerAtom,\n  shouldAlertUserAtom,\n  boardAtom,\n  selectedMarkerAtom,\n  lastMoveAtom,\n} from \"./atoms\";\nimport { CoordinatePair } from \"./types/CoordinatePair\";\nimport Square from \"./components/Square/Square\";\nimport Header from \"./components/Header/Header\";\nimport { useAtomDevtools } from \"jotai/devtools\";\nimport {} from \"./atoms/shouldAlertUser\";\n\nfunction App() {\n  const [boardState, updateBoardState] = useAtom(boardAtom);\n  const [lastMove, updateLastMove] = useAtom(lastMoveAtom);\n  const [selectedMarker, updateSelectedMarker] = useAtom(selectedMarkerAtom);\n  const [activePlayer, updateActivePlayer] = useAtom(activePlayerAtom);\n  const [shouldAlertUser, updateShouldAlertUser] = useAtom(shouldAlertUserAtom);\n\n  // init devtools\n  useAtomDevtools(activePlayerAtom, \"active Player\");\n  useAtomDevtools(boardAtom, \"board state\");\n  useAtomDevtools(selectedMarkerAtom, \"selected marker\");\n  useAtomDevtools(shouldAlertUserAtom, \"error state markers\");\n  useAtomDevtools(lastMoveAtom, \"last move\");\n\n  useEffect(() => {\n    if (!lastMove) {\n      return;\n    }\n    // run capture check code after move registers\n    const neighbors = getNeighbors(lastMove);\n    // check each neighbor of the placed marker to see if it was captured\n    for (const neighbor in neighbors as Neighbors) {\n      // TODO: Oh son of a I'M SO SORRY! (for the type atrocities committed on this soil)\n      const coordinates = neighbors[neighbor as keyof Neighbors]?.coordinates;\n\n      // TODO: remove alert neighbors\n      updateShouldAlertUser((base) =>\n        produce(base, (draft) => {\n          draft.push(`${coordinates?.row}-${coordinates?.col}`);\n        })\n      );\n\n      const spaceValue = neighbors[neighbor as keyof Neighbors]?.spaceValue;\n      if (\n        shouldBeCaptured(\n          coordinates as CoordinatePair,\n          spaceValue as SpaceValue\n        )\n      ) {\n        console.log(\"capture piece\");\n        handleCapture(coordinates as CoordinatePair);\n      }\n    }\n    // TODO: remove\n    updateShouldAlertUser((base) => []);\n    updateActivePlayer(() => (activePlayer === DARK ? LIGHT : DARK));\n  }, [lastMove]);\n\n  const makeBoard = (BOARD_WIDTH: number, BOARD_HEIGHT: number) => {\n    const boardContents: JSX.Element[][] = [];\n    for (let i = 0; i < BOARD_HEIGHT; i++) {\n      const row: JSX.Element[] = [];\n      for (let j = 0; j < BOARD_WIDTH; j++) {\n        row.push(\n          <Square\n            handleMove={handleMove}\n            spaceValue={boardState[i]?.[j]}\n            handleClickMarker={handleClickMarker}\n            coordinates={{ row: i, col: j }}\n            shouldAlertUser={shouldAlertUser.includes(`${i}-${j}`)}\n            id={`${i}-${j}`}\n            key={`${i}-${j}`}\n            isSelected={selectedMarker === `${i}-${j}`}\n          />\n        );\n      }\n      boardContents.push(row);\n    }\n    return <div className=\"board\">{boardContents}</div>;\n  };\n\n  const getNeighbors = ({ row, col }: CoordinatePair): Neighbors => {\n    const neighbors: Neighbors = {};\n    if (areValidCoordinates({ row: row - 1, col })) {\n      console.log(`North: ${boardState[row - 1]?.[col]}`);\n      neighbors.north = {\n        spaceValue: boardState[row - 1]?.[col],\n        coordinates: { row: row - 1, col },\n      };\n    }\n    if (areValidCoordinates({ row: row + 1, col })) {\n      neighbors.south = {\n        spaceValue: boardState[row + 1]?.[col],\n        coordinates: { row: row + 1, col },\n      };\n    }\n    if (areValidCoordinates({ row, col: col + 1 })) {\n      neighbors.east = {\n        spaceValue: boardState[row]?.[col + 1],\n        coordinates: { row, col: col + 1 },\n      };\n    }\n    if (areValidCoordinates({ row, col: col - 1 })) {\n      neighbors.west = {\n        spaceValue: boardState[row]?.[col - 1],\n        coordinates: { row, col: col - 1 },\n      };\n    }\n    console.log(neighbors);\n\n    return neighbors;\n  };\n\n  const areValidCoordinates = (coordinates: CoordinatePair): boolean => {\n    if (coordinates.row >= BOARD_HEIGHT || coordinates.row < 0) {\n      return false;\n    }\n    if (coordinates.col >= BOARD_WIDTH || coordinates.col < 0) {\n      return false;\n    }\n    return true;\n  };\n\n  const hasEmptyNeighbors = (coordinates: CoordinatePair): boolean => {\n    const neighbors = getNeighbors(coordinates);\n    for (let prop in neighbors) {\n      if (neighbors[prop as keyof Neighbors]?.spaceValue === EMPTY) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  const handleClickMarker = ({ row, col }: CoordinatePair) => {\n    if (\n      hasEmptyNeighbors({ row, col }) &&\n      boardState[row][col] === activePlayer\n    ) {\n      selectMarker({ row, col });\n    }\n  };\n\n  const shouldBeCaptured = (\n    coordinates: CoordinatePair,\n    spaceValue: SpaceValue\n  ): boolean => {\n    if (spaceValue === activePlayer || spaceValue === EMPTY) {\n      return false;\n    }\n\n    const neighbors = getNeighbors(coordinates);\n\n    if (\n      (neighbors.north?.spaceValue === (activePlayer || undefined) &&\n        neighbors.south?.spaceValue === (activePlayer || undefined)) ||\n      (neighbors.east?.spaceValue === (activePlayer || undefined) &&\n        neighbors.west?.spaceValue === (activePlayer || undefined))\n    ) {\n      return true;\n    }\n    return false;\n  };\n\n  const handleCapture = async ({ row, col }: CoordinatePair) => {\n    await updateBoardState((base) =>\n      produce(base, (draft) => {\n        draft[row][col] = EMPTY;\n      })\n    );\n  };\n\n  const selectMarker = ({ row, col }: CoordinatePair) => {\n    updateSelectedMarker(`${row}-${col}`);\n  };\n\n  /**\n   *\n   * @param coordinatePair - coordinates to move to\n   */\n\n  const handleMove = async ({ row, col }: CoordinatePair) => {\n    if (!selectedMarker) {\n      return;\n    }\n    const [currentRow, currentCol] = selectedMarker\n      .split(\"-\")\n      .map((coordinate) => parseInt(coordinate));\n    const moveIsLegal = isMoveLegal(\n      { row, col },\n      { row: currentRow, col: currentCol }\n    );\n    if (moveIsLegal) {\n      updateBoardState((base) =>\n        produce(base, (draft) => {\n          draft[row][col] = activePlayer;\n          draft[currentRow][currentCol] = EMPTY;\n        })\n      );\n\n      updateLastMove({ row, col });\n\n      updateSelectedMarker(() => \"\");\n    }\n  };\n\n  const isMoveLegal = (target: CoordinatePair, current: CoordinatePair) => {\n    const moveIsObstructed = isMoveObstructed(target, current);\n    const markerIsCorrectColor =\n      boardState[current.row][current.col] === activePlayer;\n    if (!moveIsObstructed && markerIsCorrectColor) {\n      return true;\n    }\n    updateShouldAlertUser((base) => [`${target.row}-${target.col}`]);\n    return false;\n  };\n\n  const isMoveObstructed = (\n    target: CoordinatePair,\n    current: CoordinatePair\n  ): boolean => {\n    // is move orthogonal, to a non-occupied space, or to itself?\n    if (\n      boardState[target.row][target.col] !== EMPTY ||\n      (target.col === current.col && target.row === current.row) ||\n      (target.col !== current.col && target.row !== current.row)\n    ) {\n      return true;\n    }\n\n    if (target.row !== current.row) {\n      // check if marker is obstructed below\n      if (target.row > current.row) {\n        for (let i = current.row + 1; i < target.row; i++) {\n          if (boardState[i][target.col] !== EMPTY) {\n            return true;\n          }\n        }\n      }\n      // check if marker is obstructed above\n      if (target.row < current.row) {\n        for (let i = current.row - 1; i > target.row; i--) {\n          if (boardState[i][target.col] !== EMPTY) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    }\n\n    if (target.col !== current.col) {\n      // check if marker is obstructed to the right\n      if (target.col > current.col) {\n        for (let i = current.col + 1; i < target.col; i++) {\n          if (boardState[target.row][i] !== EMPTY) {\n            return true;\n          }\n        }\n      }\n\n      // check if marker is obstructed to the left\n      if (target.col < current.col) {\n        for (let i = current.col - 1; i > target.col; i--) {\n          if (boardState[target.row][i] !== EMPTY) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    }\n\n    console.error(\n      `somehow, code evaded all checks.  attempting move to ${target.row}, ${target.col}`\n    );\n    return true;\n  };\n\n  return (\n    <div className=\"App\">\n      <Header activePlayer={activePlayer} />\n      {makeBoard(BOARD_WIDTH, BOARD_HEIGHT)}\n    </div>\n  );\n}\n\nexport default App;\n","/Users/joshuaanderson/Desktop/desktop/code/jotai-practice/hnefatafl/src/reportWebVitals.ts",[],"/Users/joshuaanderson/Desktop/desktop/code/jotai-practice/hnefatafl/src/atoms/boardState.ts",[],"/Users/joshuaanderson/Desktop/desktop/code/jotai-practice/hnefatafl/src/index.tsx",[],"/Users/joshuaanderson/Desktop/desktop/code/jotai-practice/hnefatafl/src/atoms/selectedMarker.ts",[],"/Users/joshuaanderson/Desktop/desktop/code/jotai-practice/hnefatafl/src/constants.ts",[],"/Users/joshuaanderson/Desktop/desktop/code/jotai-practice/hnefatafl/src/atoms/activePlayer.ts",[],"/Users/joshuaanderson/Desktop/desktop/code/jotai-practice/hnefatafl/src/components/Square/Square.tsx",["54"],"import React, { useState, useEffect } from \"react\";\nimport classNames from \"classnames\";\n\nimport { DARK, EMPTY, IS_DARK, IS_LIGHT, LIGHT } from \"../../constants\";\nimport { SpaceValue } from \"../../types\";\nimport { CoordinatePair } from \"../../types/CoordinatePair\";\nimport \"./Square.scss\";\n\ninterface Square {\n  spaceValue: SpaceValue;\n  coordinates: CoordinatePair;\n  handleMove: (coordinates: CoordinatePair) => void;\n  handleClickMarker: (coordinates: CoordinatePair) => void;\n  shouldAlertUser: boolean;\n  key: string;\n  id: string;\n  isSelected: boolean;\n}\n\nconst Square = ({\n  spaceValue,\n  coordinates,\n  handleMove,\n  handleClickMarker,\n  shouldAlertUser,\n  isSelected,\n}: Square) => {\n  const [isFlashing, setIsFlashing] = useState(false);\n\n  useEffect(() => {\n    if (shouldAlertUser) {\n      setIsFlashing(true);\n    }\n  }, [shouldAlertUser]);\n\n  useEffect(() => {\n    if (isFlashing === true) {\n      setTimeout(() => setIsFlashing(false), 500);\n    }\n  }, [isFlashing]);\n\n  const markerClasses = classNames({\n    marker: true,\n    [IS_LIGHT]: spaceValue === LIGHT,\n    [IS_DARK]: spaceValue === DARK,\n    highlight: isSelected,\n  });\n\n  const squareClasses = classNames({\n    square: true,\n    \"is-flashing\": isFlashing\n  })\n\n  return (\n    <div className={squareClasses} onClick={() => handleMove(coordinates)}>\n      {spaceValue !== EMPTY && (\n        <div\n          id={`${coordinates.row}-${coordinates.col}-marker`}\n          className={markerClasses}\n          onClick={() => handleClickMarker(coordinates)}\n        ></div>\n      )}\n    </div>\n  );\n};\n\nexport default Square;\n","/Users/joshuaanderson/Desktop/desktop/code/jotai-practice/hnefatafl/src/components/Header/Header.tsx",["55"],"import React, { Fragment } from \"react\";\nimport { DARK, LIGHT } from \"../../constants\";\nimport \"./Header.scss\";\n\ninterface Header {\n  activePlayer: typeof DARK | typeof LIGHT;\n}\n\nconst Header = ({ activePlayer }: Header) => {\n  return (\n    <Fragment>\n      <h1 className=\"title\">Hnefatafl</h1>\n      <h3 className=\"subtitle\">\n        {activePlayer === DARK ? \"Black to move\" : \"White to move\"}\n      </h3>\n    </Fragment>\n  );\n};\n\nexport default Header;\n","/Users/joshuaanderson/Desktop/desktop/code/jotai-practice/hnefatafl/src/atoms/shouldAlertUser.ts",[],"/Users/joshuaanderson/Desktop/desktop/code/jotai-practice/hnefatafl/src/atoms/index.ts",[],"/Users/joshuaanderson/Desktop/desktop/code/jotai-practice/hnefatafl/src/atoms/lastMove.ts",[],{"ruleId":"56","severity":1,"message":"57","line":67,"column":6,"nodeType":"58","endLine":67,"endColumn":16,"suggestions":"59"},{"ruleId":"60","severity":1,"message":"61","line":20,"column":7,"nodeType":"62","messageId":"63","endLine":20,"endColumn":13},{"ruleId":"60","severity":1,"message":"64","line":9,"column":7,"nodeType":"62","messageId":"63","endLine":9,"endColumn":13},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'activePlayer', 'getNeighbors', 'handleCapture', 'shouldBeCaptured', 'updateActivePlayer', and 'updateShouldAlertUser'. Either include them or remove the dependency array.","ArrayExpression",["65"],"@typescript-eslint/no-redeclare","'Square' is already defined.","Identifier","redeclared","'Header' is already defined.",{"desc":"66","fix":"67"},"Update the dependencies array to be: [activePlayer, getNeighbors, handleCapture, lastMove, shouldBeCaptured, updateActivePlayer, updateShouldAlertUser]",{"range":"68","text":"69"},[2381,2391],"[activePlayer, getNeighbors, handleCapture, lastMove, shouldBeCaptured, updateActivePlayer, updateShouldAlertUser]"]